 /* printf("--------------\n");
  printf("buff 0 %ld\n", p->c.buf[0].__jmpbuf[0]);
  printf("buff 1 %ld\n", p->c.buf[0].__jmpbuf[1]);
  printf("buff 2 %ld\n", p->c.buf[0].__jmpbuf[2]);
  printf("buff 3 0x%08x\n", (unsigned int) p->c.buf[0].__jmpbuf[3]);
  printf("buff 4 0x%08x\n", (unsigned int) p->c.buf[0].__jmpbuf[4]);
  printf("buff 5 0x%08x\n", (unsigned int) p->c.buf[0].__jmpbuf[5]);
  printf("buff 6 0x%08x\n", (unsigned int) p->c.buf[0].__jmpbuf[6]);
  printf("buff 7 0x%08x\n", (unsigned int) p->c.buf[0].__jmpbuf[7]);

  //DecodeJMPBUF64()''
  //printf("esp 0x%08x\n", p->c.buf[0].__jmpbuf[4]);
  //printf("eip 0x%08x\n", p->c.buf[0].__jmpbuf[5]);
  printf("--------------\n");*/

   /*return_here:
  if(!setjmp32(p->c.buf, (unsigned int)&&return_here + 23))
  {

	  //printf("rethere 0x%08x\n", &&return_here + 5);
	 // printf("rethere 0x%08x\n", &&printf("rethere 0x%08x\n", &&return_here + 5););

	  printf("from setjmp\n");

	  getchar();
  }
  else
  {
	  printf("from longjmp\n");
  }*/

 /* printf("ebx %d\n", p->c.buf[0].__jmpbuf[0]);
  printf("esi %d\n", p->c.buf[0].__jmpbuf[1]);
  printf("edi %d\n", p->c.buf[0].__jmpbuf[2]);
  printf("ebp 0x%08x\n", (unsigned int) p->c.buf[0].__jmpbuf[3]);
  printf("esp 0x%08x\n", (unsigned int) p->c.buf[0].__jmpbuf[4]);
  printf("eip 0x%08x\n", (unsigned int) p->c.buf[0].__jmpbuf[5]);*/

  /*printf("decode.0 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[0]));
  printf("decode.1 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[1]));
  printf("decode.2 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[2]));
  printf("decode.3 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[3]));
  printf("decode.4 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[4]));
  printf("decode.5 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[5]));
  printf("decode.6 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[6]));
  printf("decode.7 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[7]));

  printf("decode.0 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[0]));
  printf("decode.1 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[1]));
  printf("decode.2 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[2]));
  printf("decode.3 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[3]));
  printf("decode.4 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[4]));
  printf("decode.5 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[5]));
  printf("decode.6 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[6]));
  printf("decode.7 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[7]));*/

  //getchar();






//printf("pointer 1 0x%016x pointer 2 0x%016x\n", ((unsigned int)context_stub), (unsigned int)((char*)stack + n - 4));
  //printf("pointer 1 0x%016x pointer 2 0x%016x\n", EncodeJMPBUF64((unsigned int)context_stub), EncodeJMPBUF64((unsigned int)((char*)stack + n - 4)));
  
  


/*printf("decode.0 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[0]));
   printf("decode.1 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[1]));
   printf("decode.2 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[2]));
   printf("decode.3 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[3]));
   printf("decode.4 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[4]));
   printf("decode.5 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[5]));
   printf("decode.6 0x%016x\n", (unsigned int) (p->c.buf[0].__jmpbuf[6]));*/
   /*printf("decode.7 %d\n", (p->c.buf[0].__jmpbuf[7]));*/

   /*addr2 = (p->c.buf[0].__jmpbuf[7]);*/

  /*long long addr1, addr2, addr3;
  addr1 = addr2 = addr3 = 0x0;*/

 /*printf("decode.0 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[0]));
   printf("decode.1 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[1]));
   printf("decode.2 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[2]));
   printf("decode.3 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[3]));
   printf("decode.4 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[4]));
   printf("decode.5 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[5]));
   printf("decode.6 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[6]));*/
   //printf("decode.7 0x%016x\n", DecodeJMPBUF64(p->c.buf[0].__jmpbuf[7]));

  /*addr1 = (p->c.buf[0].__jmpbuf[7]);

	//addr3 = EncodeJMPBUF64((long long)addr1);

	printf("addr1 %lld\n", addr1);

	addr2 = DecodeJMPBUF64(addr1);

	printf("addr2 0x%016x\n", (unsigned int) addr2);

   addr3 = EncodeJMPBUF64(addr2);

   printf("addr3 %lld\n", (addr1));*/













#define JB_BX        0
#define JB_SI        1
#define JB_DI        2
#define JB_BP        3
#define JB_SP        4
#define JB_PC        5
#define JB_SIZE 	24


void ex(void){

	asm volatile ("movl $0x1, %%eax;"         /* SYS_exit is 1 */
	    "xor %%ebx, %%ebx;"      /* Argument is in ebx, it is 0 */
	    "int $0x80"            /* Enter kernel mode */
	     :
		 :
		 :);

	return;

}

int longjmp32(jmp_buf __env){

	/*get ebx*/
/*	asm volatile ("mov %0, %%ebx;"
				  "mov %1, %%esi;"
				  "mov %2, %%edi;"
				  "mov %3, %%esp;"
				  "mov %4, %%ebp;"
				  "jmp *%0;"
			:output
			:"r" (__env[0].__jmpbuf[JB_BX]),  	input
			"r" (__env[0].__jmpbuf[JB_SI]), 	input
			"r" (__env[0].__jmpbuf[JB_DI]), 	input
			"r" (__env[0].__jmpbuf[JB_SP]), 	input
			"r" (__env[0].__jmpbuf[JB_BP]),		input
			"r" (__env[0].__jmpbuf[JB_PC])		input
			:clobbered register
			);

	printf("here\n");*/


 	/*get ebx*/
 		asm volatile ("movl %0, %%ebx;"
 				:									/*output*/
 				: "r" (__env[0].__jmpbuf[JB_BX])   	/*input*/
 				: 		    						/*clobbered register*/
 				);

 		/*get esi*/
 		asm volatile (	"mov %0, %%esi;"
 				:   /*output*/
 				:"r" (__env[0].__jmpbuf[JB_SI]) 		     /*input*/
 				:      /*clobbered register*/
 				);

 		/*get edi*/
 		asm volatile (	"mov %0, %%edi;"
 				:   /*output*/
 				:"r" (__env[0].__jmpbuf[JB_DI]) 		     /*input*/
 				:     /*clobbered register*/
 				);

 		/*get esp*/
 		//__env[0].__jmpbuf[JB_SP] = DecodeJMPBUF32(__env[0].__jmpbuf[JB_SP]);
 		asm volatile ("mov %0, %%esp;"
 				:   /*output*/
 		   		:"r" (__env[0].__jmpbuf[JB_SP]) 		     /*input*/
 		   		:     /*clobbered register*/
 		   		);


 		/*get ebp*/
 		asm volatile ("mov %0, %%ebp;"
 				:   /*output*/
 				:"r" (__env[0].__jmpbuf[JB_BP])		     /*input*/
 				:     /*clobbered register*/
 				);


 		/*jmp*/

 		//unsigned int pc = DecodeJMPBUF32(__env[0].__jmpbuf[JB_PC]);

 		//printf("pc 0x%08x\n", pc);

 		asm volatile (
 				"mov $0x1, %%eax;"
 				"jmp *%0;"
 				:   //output
 				:"d" (__env[0].__jmpbuf[JB_PC])		    // input
 				:    //clobbered register
 				);

 	 return 1;
}

int setjmp32(jmp_buf __env, unsigned int pc){

	/* int eax = 0;

	 asm volatile ("mov %%eax, %0"
	  			:"=r" (eax)   output
	  			: 		     input
	  			: "%eax"     clobbered register

	  			/*get ebx*/
	/*asm volatile (
				:"=r" (__env[0].__jmpbuf[JB_PC])   output
				:input
	 			:clobbered register
	 			);*/




	//

	/*get ebx*/
	asm volatile ("mov %%ebx, %0;"
				"mov %%esi, %1;"
				"mov %%edi, %2;"
				"mov %%esp, %3;"
				"mov %%ebp, %4;"
				"mov 44(%%esp), %5;"
	 			:"=r" (__env[0].__jmpbuf[JB_BX]),   /*output*/
				"=r" (__env[0].__jmpbuf[JB_SI]),   /*output*/
				"=r" (__env[0].__jmpbuf[JB_DI]),   /*output*/
				"=r" (__env[0].__jmpbuf[JB_SP]),  /* output*/
				"=r" (__env[0].__jmpbuf[JB_BP]),  /*output*/
				"=r" (__env[0].__jmpbuf[JB_PC])   /*output*/
	 			:/*input*/
	 			:/*clobbered register*/
	 			);

	printf("pc 0x%08x\n", (unsigned int)__env[0].__jmpbuf[JB_PC]);


	 /*get ip*/
	 //__env[0].__jmpbuf[JB_PC] = EncodeJMPBUF32(pc);
	// __env[0].__jmpbuf[JB_PC] = pc;

/*
 	get ebx
 	asm volatile (	"mov $0x0, %%eax;"
 			"mov %%ebx, %%eax;"
 			"mov %%eax, %0;"
 			:"=r" (__env[0].__jmpbuf[JB_BX])   output
 			: 		     input
 			: "%eax"     clobbered register
 			);


 	get esi
 	asm volatile (	"mov $0x0, %%eax;"
 			"mov %%esi, %%eax;"
 			"mov %%eax, %0;"
 			:"=r" (__env[0].__jmpbuf[JB_SI])   output
 			: 		     input
 			: "%eax"     clobbered register
 			);

 	get edi
 	asm volatile (	"mov $0x0, %%eax;"
 			"mov %%edi, %%eax;"
 			"mov %%eax, %0;"
 			:"=r" (__env[0].__jmpbuf[JB_DI])   output
 			: 		     input
 			: "%eax"     clobbered register
 			);

 	get esp
 	asm volatile (	"mov $0x0, %%eax;"
 			"mov %%esp, %%eax;"
 			"mov %%eax, %0;"
 			:"=r" (__env[0].__jmpbuf[JB_SP])   output
 	   		: 		     input
 	   		: "%eax"     clobbered register
 	   		);
 	//__env[0].__jmpbuf[JB_SP] = EncodeJMPBUF32(__env[0].__jmpbuf[JB_SP]);

 	get ebp
 	asm volatile (	"mov $0x0, %%eax;"
 			"mov %%ebp, %%eax;"
 			"mov %%eax, %0;"
 			:"=r" (__env[0].__jmpbuf[JB_BP])   output
 			:		     input
 			: "%eax"     clobbered register
 			);

*/

 	/*get ip*/
 	//__env[0].__jmpbuf[JB_PC] = EncodeJMPBUF32(pc);
 	//__env[0].__jmpbuf[JB_PC] = pc;



 	/*printf("ebp 0x%08x\n", (unsigned int) __env[0].__jmpbuf[JB_BP]);
 	printf("ebx %d\n", (unsigned int) __env[0].__jmpbuf[JB_BX]);
 	printf("esi %d\n", __env[0].__jmpbuf[JB_SI]);
 	printf("edi %d\n", __env[0].__jmpbuf[JB_DI]);
 	printf("esp 0x%08x\n", (unsigned int) __env[0].__jmpbuf[JB_SP]);
 	printf("eip 0x%08x\n", (unsigned int) __env[0].__jmpbuf[JB_PC]);*/

 	return 0;
}